#ifndef RADEEP_ADDRESS_GENERATOR_H
#define RADEEP_ADDRESS_GENERATOR_H

#include "ns3/Radeep-address.h"

namespace ns3 {

/**
 * \ingroup address
 * \ingroup Radeep
 *
 * \brief This generator assigns addresses sequentially from a provided
 * network address; used in topology code.
 *
 * \note BEWARE: this class acts as a Singleton.
 * In other terms, two different instances of RadeepAddressGenerator will
 * pick Radeep numbers from the same pool. Changing the network in one of them
 * will also change the network in the other instances.
 *
 */
class RadeepAddressGenerator {
public:
  /**
   * \brief Initialise the base network, mask and address for the generator
   *
   * The first call to NextAddress() or GetAddress() will return the
   * value passed in.
   *
   * \param net The network for the base RadeepAddress
   * \param mask The network mask of the base RadeepAddress
   * \param addr The base address used for initialization
   */
  static void Init (const RadeepAddress net, const RadeepMask mask, 
                    const RadeepAddress addr = "0.0.0.1");

  /**
   * \brief Get the next network according to the given RadeepMask
   *
   * This operation is a pre-increment, meaning that the internal state
   * is changed before returning the new network address.
   *
   * This also resets the address to the base address that was
   * used for initialization.
   *
   * \param mask The RadeepMask used to set the next network
   * \returns the Radeep address of the next network
   */
  static RadeepAddress NextNetwork (const RadeepMask mask);

  /**
   * \brief Get the current network of the given RadeepMask
   *
   * Does not change the internal state; this just peeks at the current
   * network
   *
   * \param mask The RadeepMask for the current network
   * \returns the Radeep address of the current network
   */
  static RadeepAddress GetNetwork (const RadeepMask mask);

  /**
   * \brief Set the address for the given mask
   *
   * \param addr The address to set for the current mask
   * \param mask The RadeepMask whose address is to be set
   */
  static void InitAddress (const RadeepAddress addr, const RadeepMask mask);

  /**
   * \brief Allocate the next RadeepAddress for the configured network and mask
   *
   * This operation is a post-increment, meaning that the first address
   * allocated will be the one that was initially configured.
   *
   * \param mask The RadeepMask for the current network
   * \returns the Radeep address
   */
  static RadeepAddress NextAddress (const RadeepMask mask);

  /**
   * \brief Get the RadeepAddress that will be allocated upon NextAddress ()
   *
   * Does not change the internal state; just is used to peek the next
   * address that will be allocated upon NextAddress ()
   *
   * \param mask The RadeepMask for the current network
   * \returns the Radeep address
   */
  static RadeepAddress GetAddress (const RadeepMask mask);

  /**
   * \brief Reset the networks and RadeepAddress to zero
   */
  static void Reset (void);

  /**
   * \brief Add the RadeepAddress to the list of Radeep entries
   *
   * Typically, this is used by external address allocators that want
   * to make use of this class's ability to track duplicates.  AddAllocated
   * is always called internally for any address generated by NextAddress ()
   *
   * \param addr The RadeepAddress to be added to the list of Radeep entries
   * \returns true on success
   */
  static bool AddAllocated (const RadeepAddress addr);

  /**
   * \brief Check the RadeepAddress allocation in the list of Radeep entries
   *
   * \param addr The RadeepAddress to be checked in the list of Radeep entries
   * \returns true if the network is already allocated
   */
  static bool IsAddressAllocated (const RadeepAddress addr);

  /**
   * \brief Check if a network has already allocated addresses
   *
   * \param addr The Radeep network to be checked
   * \param mask The Radeep network mask
   * \returns true if the network is already allocated
   */
  static bool IsNetworkAllocated (const RadeepAddress addr, const RadeepMask mask);

  /**
   * \brief Used to turn off fatal errors and assertions, for testing
   */
  static void TestMode (void);
};

} // namespace ns3

#endif /* RADEEP_ADDRESS_GENERATOR_H */
